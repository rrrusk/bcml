@mokuzi[h2 h3]

@h2 はじめに
bcmlの文法は、「シンボル」「タグ」「修飾部」「メインコンテンツ」にわかれます。

試しに「@span.command hello world」というファイルをsample.bcmlというファイル名で保存し、
@command bcml sample.bcml
とコマンドをうってください。
パスを通してない場合は、
@command bcmlフォルダのパス/lib/bcml sample.bcml
としてください。

するとこのようなファイルがsample.htmlという名前で出来上がります。

@(pre
@span.command hello world
)@

例えばこの例で言うと、「@」が「シンボル」、「span」が「タグ」、「.command」が修飾部、「hello world」が「メインコンテンツ」となります。

bcmlは「シンボル」によってbcml記法で書かれている部分がどこかを判別して「タグ」部分に書かれた文字がhtmlのタグ名に相当します。

「修飾部」は「修飾子」と「修飾内容」でできておりid、クラス、リンクがデフォルトで指定できます。
この部分についての詳しいことは修飾子の部分を参照してください。

@h2 ワンライナー記法
bcmlにはワンライナー記法とマルチライナー記法があります。
ワンライナー記法は一行でbcml記法が完結しますが簡潔な記法を使うことができます。
マルチライナー記法は複数行の「メインコンテンツ」を書くことと行の途中でbcml記法を使うことができますが、閉じタグを書かなければならないためワンライナー記法ほどの簡潔さはありません。

主にマルチライナー記法はpreタグでコードを載せるときや、行の途中にaタグでリンクを載せるときに便利です。

先ほどの例もワンライナー記法で書かれているのでその例で解説します
\@span.command hello world
ワンライナー記法で必要なのは「シンボル」、「タグ」、「修飾部」でできたbcml部文と「メインコンテンツ」なのですがワンライナー記法ではbcml部分とメインコンテンツ部分の間に半角スペースをいれなければなりません。

@h2 マルチライナー記法
マルチライナー記法は開始シンボル、bcml部分、メインコンテンツ、終了シンボルが必要です。
例を出すと

@(pre
\@(pre
alert('hello');
)@\
)@

ほかに、このような書き方もできます。

@(pre
\@(pre alert('hello');)@\
)@

マルチライナー記法は、開始シンボル(デフォルトでは「@(」)の直後にbcml部分、その後に半角スペースもしくは改行をいれてメインコンテンツ、終了シンボル(デフォルトでは「)@」)を必要とします。

@h2 修飾部
bcmlは修飾部によってタグで囲われた文字にリンクとidとクラスをデフォルトでつけることができます。
config.ymlをいじれば修飾子を増やすことができますがこの機能は非推奨です。

修飾部の文法はそれがなにを修飾するかを表す（例えば#ならidをつける）修飾子、修飾する内容を表す（idの例で言えばid名）を表す「修飾内容」をスペースを入れずに書きます。
修飾内容にスペースや修飾子にある文字が含まれている場合は[]で囲んでください。

例
@(pre
@h4.class#id hello
bcml->@h4.class#id hello
@:[http://google.com] google
bcml->@:[http://google.com] google
)@

デフォルトで使える修飾子はidを表す「#」クラスを表す「.」aタグのhref属性持ちで囲まれたリンクを表す「:」です。
修飾子にはタグ名の中に修飾内容を書き込む「インタグ」修飾子の外にタグを作って修飾内容を書き込む(:の場合は修飾内容がhref属性に入ったaタグを作る)「アウトタグ」の２種類があります。
先程の例で言うと「.」「#」はインタグ「:」はアウトタグです。

また、シンボルの後のタグを省略して修飾部メインコンテンツとした場合はインタグは自動でspanタグが生成されアウトタグの場合はメインコンテンツをそのままアウトタグの内容で囲みます。

@h2 特殊タグ
bcmlには今まで述べてきた基本的な文法以外に特殊タグというものがあります。
特殊タグはここの機能に沿って、htmlを自動生成します。
また、特殊タグは他のhtmlにも影響を与える場合があります。
このタグはメインコンテンツを必要とせずワンライナー記法でのシンボル、特殊タグの名前、[]の中に引数を入れたものを必要とします。

説明だけではピンとこないと思うので具体例で説明していきます。

@h3 目次機能
目次機能は、引数に書かれたタグのリストを作ります。このリストは&lt;a href="h30"&gt;hello&lt;/a&gt;と言ったふうにページ内リンクができるようになった状態で生成されます。
この機能はリンク先のタグにidを設定する必要があるので他のhtmlに影響を与えます。

@h4 hello
@h5 world
@h6 hoge
@h5 bar
@h4 foo
@(pre
@h4 hello
@h5 world
@h6 hoge
@h5 bar
@h4 foo
@mokuzi[h4 h5]
bcml->@h4 hello
bcml->@h5 world
bcml->@h6 hoge
bcml->@h5 bar
bcml->@h4 foo
bcml->\@mokuzi[h4 h5]
)@

目次機能は[]の中にどの目次にするか引数をとります。
h3タグを目次にしたい場合は[h3]、h4タグとh5タグを目次にしたい場合は[h4 h5]と引数を書きます。
指定できるタグは２つまでになっており２つ指定した場合は先にしたほうが親になりネストするようになっています。

@h3 リンクにタイトルをつける
ページタイトルを取得するというのはブログなどを書いているとよくやる作業ですが案外デフォルト状態のブラウザでは難しいです。
この機能だとurlのみ書いておけば自動でタイトルタグからページタイトルを取得できます。

@(pre
@:[http://google.com]
bcml->@:[http://google.com]
)@

この書き方はタグを書かなかった時の修飾部でリンクをつけようとした時の書き方に似ていますが、内部処理的には別物です。
しかし、bcmlはこのことを意識しなくてもいいように設計されています。

@h2 エスケープ
bcml記法をエスケープしたい場合は、ワンライナー記法の時はシンボル。マルチライナー記法の時は開始シンボルの前にバックスラッシュを入れてください。

@(pre
\@span エスケープされます
bcml-> \\@span エスケープされます
)@

@h2 コメント
bcmlでは@---、---@で囲まれた部分がコメントになります。
コメントはhtmlに変換されるときには消去されているので変換後のファイルに影響を与えることはありません。

@h2 カスタマイズ
bcml記法を使用することの大きなメリットとして挙げられるものの一つにカスタマイズができることがありますがその方法をいまから紹介していきます。
ユーザーの設定はbcmlフォルダ直下にあるconfig.ymlに記述していきます。これはyamlファイルなのでyaml記法を使って書いてください。
yamlについてはこちらを参照してください。
@:[http://magazine.rubyist.net/?0009-YAML]

config.ymlの中身はデフォルトではこうなっています。
@(pre
---
GENERAL:
  symbol: ["@", "@(", ")@"]
  bracket: ["[", "]"]
  comment: ["@---","---@"]

USERTAGS:

TAGS:
  h1:
    display: block
  h2:
    display: block
  h3:
    display: block
  h4:
    display: block
  h5:
    display: block
  h6:
    display: block
  a:
    display: inline
  div:
    display: block
  span:
    display: inline
  p:
    display: block
  pre:
    display: block
    escape: true
  ul:
    display: block
  li:
    display: inline
  b:
    display: inline
  i:
    display: inline
  blockquote:
    display: block

QUALIFIERS:
  ".":
    point: intag
    usage: class="<qsub>"
  "#":
    point: intag
    usage: id="<qsub>"
  ":":
    point: outtag
    usage: [<a href="<qsub>">, </a>]

SPECIALTAGS:
  - mokuzi
  - ":"
)@


@h3 ユーザータグ
ユーザータグは設定したものに置き換えられます。
ユーザータグの設定はUTAGSを編集してください。
設定ファイル
@(pre
UTAGS:
  midasi:
    bcml: h3.bbb
  るびー:
    bcml: pre.[brush:ruby]
)@

この設定では@midasiが@h3.bbbのかわり@rubyが@pre.[brush:ruby]の代わりになるようになっています。

@h3.bbb hello
@pre.[brush:ruby] p "hello"
bcml->@midasi hello
@るびー p "hello"
)@

@h3 根本的な設定
@(pre
GENERAL:
  symbol: ["!", "![", "]!"]
  bracket: ["(", ")"]
  comment: ["!---","---!"]
)@

こうするとsymbolはワンライナー記法の時!になりマルチライナー記法の時は開始シンボルが![終了シンボルが]!になり、修飾部の修飾内容を囲むものは()になり、コメントは!--- ---!で囲まれたものになります。

つまり
デフォルトだと
\@h3 hello
\@(a world)@
\@--- comment ---@
となるところを
\!h3 hello
\![a:[http://foo] world ]!
\!--- comment ---!
と書くことができます。

@h3 使えるタグの設定
bcmlはbcml記法が書かれていてもタグが登録されていない場合は、htmlに変換せず普通のテキストと同様に扱います。
そのためデフォルトで用意されているもの以外のタグが使いたい場合は他具を登録する必要があります。

使えるタグはTAGSの中に記述することで増やせます。
タグ名がキー、displayはそのタグがインライン要素ならinlineブロック要素ならblockとしてください。
pタグをbcmlは自動でつけますがその時pタグでインライン要素なら囲みますがブロック要素なら囲みません。
@(pre
TAGS:
  h1:
    display: block
  a:
    display: inline
  div:
    display: block
  span:
    display: inline
)@

@h3 使える修飾子の設定
デフォルトで用意されている修飾子はid、クラス、リンクを意味する「#」「.」「:」のみです。
増やしたい場合はQUALIFIERSの中に記述してください。

@(pre
QUALIFIERS:
  ".":
    point: intag
    usage: class="<qsub>"
  "#":
    point: intag
    usage: id="<qsub>"
  ":":
    point: outtag
    usage: [<a href="<qsub>">, </a>]
)@

必要な情報はキーに修飾子にする文字、pointにintagもしくはouttag、usageに修飾内容を囲む部分を書いていきます。

pointはintagにするとインタグ、outtagにするとアウトタグとして扱われます。

usageはインタグの場合は文字列で<qsub>が修飾内容と入れ替わります。
アウトタグの場合は配列で一つ目が開きタグ、二つ目が閉じタグになっておりこの2つがメインコンテンツを囲います。アウトタグも同様に<qsub>が修飾内容と入れ替わります。
